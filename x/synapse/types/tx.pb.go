// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: synapse/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgBridgeIn struct {
	Creator string          `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Data    []*InBridgeData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgBridgeIn) Reset()         { *m = MsgBridgeIn{} }
func (m *MsgBridgeIn) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeIn) ProtoMessage()    {}
func (*MsgBridgeIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4efa802519a8c67, []int{0}
}
func (m *MsgBridgeIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeIn.Merge(m, src)
}
func (m *MsgBridgeIn) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeIn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeIn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeIn proto.InternalMessageInfo

func (m *MsgBridgeIn) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBridgeIn) GetData() []*InBridgeData {
	if m != nil {
		return m.Data
	}
	return nil
}

type InBridgeData struct {
	Coin     *types.Coin `protobuf:"bytes,2,opt,name=coin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin,omitempty"`
	DestAddr string      `protobuf:"bytes,3,opt,name=destAddr,proto3" json:"destAddr,omitempty"`
	DestEnv  string      `protobuf:"bytes,4,opt,name=destEnv,proto3" json:"destEnv,omitempty"`
}

func (m *InBridgeData) Reset()         { *m = InBridgeData{} }
func (m *InBridgeData) String() string { return proto.CompactTextString(m) }
func (*InBridgeData) ProtoMessage()    {}
func (*InBridgeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4efa802519a8c67, []int{1}
}
func (m *InBridgeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InBridgeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InBridgeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InBridgeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InBridgeData.Merge(m, src)
}
func (m *InBridgeData) XXX_Size() int {
	return m.Size()
}
func (m *InBridgeData) XXX_DiscardUnknown() {
	xxx_messageInfo_InBridgeData.DiscardUnknown(m)
}

var xxx_messageInfo_InBridgeData proto.InternalMessageInfo

func (m *InBridgeData) GetCoin() *types.Coin {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *InBridgeData) GetDestAddr() string {
	if m != nil {
		return m.DestAddr
	}
	return ""
}

func (m *InBridgeData) GetDestEnv() string {
	if m != nil {
		return m.DestEnv
	}
	return ""
}

type MsgBridgeInResponse struct {
	RespHash string `protobuf:"bytes,1,opt,name=respHash,proto3" json:"respHash,omitempty"`
}

func (m *MsgBridgeInResponse) Reset()         { *m = MsgBridgeInResponse{} }
func (m *MsgBridgeInResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeInResponse) ProtoMessage()    {}
func (*MsgBridgeInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4efa802519a8c67, []int{2}
}
func (m *MsgBridgeInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeInResponse.Merge(m, src)
}
func (m *MsgBridgeInResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeInResponse proto.InternalMessageInfo

func (m *MsgBridgeInResponse) GetRespHash() string {
	if m != nil {
		return m.RespHash
	}
	return ""
}

type MsgBridgeOut struct {
	Creator string           `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Data    []*OutBridgeData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgBridgeOut) Reset()         { *m = MsgBridgeOut{} }
func (m *MsgBridgeOut) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeOut) ProtoMessage()    {}
func (*MsgBridgeOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4efa802519a8c67, []int{3}
}
func (m *MsgBridgeOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeOut.Merge(m, src)
}
func (m *MsgBridgeOut) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeOut) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeOut.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeOut proto.InternalMessageInfo

func (m *MsgBridgeOut) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBridgeOut) GetData() []*OutBridgeData {
	if m != nil {
		return m.Data
	}
	return nil
}

type OutBridgeData struct {
	Coin      *types.Coin `protobuf:"bytes,2,opt,name=coin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin,omitempty"`
	DestAddr  string      `protobuf:"bytes,3,opt,name=destAddr,proto3" json:"destAddr,omitempty"`
	DestChain string      `protobuf:"bytes,4,opt,name=destChain,proto3" json:"destChain,omitempty"`
}

func (m *OutBridgeData) Reset()         { *m = OutBridgeData{} }
func (m *OutBridgeData) String() string { return proto.CompactTextString(m) }
func (*OutBridgeData) ProtoMessage()    {}
func (*OutBridgeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4efa802519a8c67, []int{4}
}
func (m *OutBridgeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutBridgeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutBridgeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutBridgeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutBridgeData.Merge(m, src)
}
func (m *OutBridgeData) XXX_Size() int {
	return m.Size()
}
func (m *OutBridgeData) XXX_DiscardUnknown() {
	xxx_messageInfo_OutBridgeData.DiscardUnknown(m)
}

var xxx_messageInfo_OutBridgeData proto.InternalMessageInfo

func (m *OutBridgeData) GetCoin() *types.Coin {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *OutBridgeData) GetDestAddr() string {
	if m != nil {
		return m.DestAddr
	}
	return ""
}

func (m *OutBridgeData) GetDestChain() string {
	if m != nil {
		return m.DestChain
	}
	return ""
}

type MsgBridgeOutResponse struct {
	RespHash string `protobuf:"bytes,1,opt,name=respHash,proto3" json:"respHash,omitempty"`
}

func (m *MsgBridgeOutResponse) Reset()         { *m = MsgBridgeOutResponse{} }
func (m *MsgBridgeOutResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeOutResponse) ProtoMessage()    {}
func (*MsgBridgeOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4efa802519a8c67, []int{5}
}
func (m *MsgBridgeOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeOutResponse.Merge(m, src)
}
func (m *MsgBridgeOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeOutResponse proto.InternalMessageInfo

func (m *MsgBridgeOutResponse) GetRespHash() string {
	if m != nil {
		return m.RespHash
	}
	return ""
}

type MsgSetPendingKmsAddress struct {
	Creator           string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PendingKmsAddress string `protobuf:"bytes,2,opt,name=pendingKmsAddress,proto3" json:"pendingKmsAddress,omitempty"`
}

func (m *MsgSetPendingKmsAddress) Reset()         { *m = MsgSetPendingKmsAddress{} }
func (m *MsgSetPendingKmsAddress) String() string { return proto.CompactTextString(m) }
func (*MsgSetPendingKmsAddress) ProtoMessage()    {}
func (*MsgSetPendingKmsAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4efa802519a8c67, []int{6}
}
func (m *MsgSetPendingKmsAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPendingKmsAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPendingKmsAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPendingKmsAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPendingKmsAddress.Merge(m, src)
}
func (m *MsgSetPendingKmsAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPendingKmsAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPendingKmsAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPendingKmsAddress proto.InternalMessageInfo

func (m *MsgSetPendingKmsAddress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetPendingKmsAddress) GetPendingKmsAddress() string {
	if m != nil {
		return m.PendingKmsAddress
	}
	return ""
}

type MsgSetPendingKmsAddressResponse struct {
}

func (m *MsgSetPendingKmsAddressResponse) Reset()         { *m = MsgSetPendingKmsAddressResponse{} }
func (m *MsgSetPendingKmsAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetPendingKmsAddressResponse) ProtoMessage()    {}
func (*MsgSetPendingKmsAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4efa802519a8c67, []int{7}
}
func (m *MsgSetPendingKmsAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPendingKmsAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPendingKmsAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPendingKmsAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPendingKmsAddressResponse.Merge(m, src)
}
func (m *MsgSetPendingKmsAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPendingKmsAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPendingKmsAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPendingKmsAddressResponse proto.InternalMessageInfo

type MsgSetKmsAddress struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgSetKmsAddress) Reset()         { *m = MsgSetKmsAddress{} }
func (m *MsgSetKmsAddress) String() string { return proto.CompactTextString(m) }
func (*MsgSetKmsAddress) ProtoMessage()    {}
func (*MsgSetKmsAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4efa802519a8c67, []int{8}
}
func (m *MsgSetKmsAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetKmsAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetKmsAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetKmsAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetKmsAddress.Merge(m, src)
}
func (m *MsgSetKmsAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetKmsAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetKmsAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetKmsAddress proto.InternalMessageInfo

func (m *MsgSetKmsAddress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgSetKmsAddressResponse struct {
}

func (m *MsgSetKmsAddressResponse) Reset()         { *m = MsgSetKmsAddressResponse{} }
func (m *MsgSetKmsAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetKmsAddressResponse) ProtoMessage()    {}
func (*MsgSetKmsAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4efa802519a8c67, []int{9}
}
func (m *MsgSetKmsAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetKmsAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetKmsAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetKmsAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetKmsAddressResponse.Merge(m, src)
}
func (m *MsgSetKmsAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetKmsAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetKmsAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetKmsAddressResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgBridgeIn)(nil), "core.synapse.MsgBridgeIn")
	proto.RegisterType((*InBridgeData)(nil), "core.synapse.InBridgeData")
	proto.RegisterType((*MsgBridgeInResponse)(nil), "core.synapse.MsgBridgeInResponse")
	proto.RegisterType((*MsgBridgeOut)(nil), "core.synapse.MsgBridgeOut")
	proto.RegisterType((*OutBridgeData)(nil), "core.synapse.OutBridgeData")
	proto.RegisterType((*MsgBridgeOutResponse)(nil), "core.synapse.MsgBridgeOutResponse")
	proto.RegisterType((*MsgSetPendingKmsAddress)(nil), "core.synapse.MsgSetPendingKmsAddress")
	proto.RegisterType((*MsgSetPendingKmsAddressResponse)(nil), "core.synapse.MsgSetPendingKmsAddressResponse")
	proto.RegisterType((*MsgSetKmsAddress)(nil), "core.synapse.MsgSetKmsAddress")
	proto.RegisterType((*MsgSetKmsAddressResponse)(nil), "core.synapse.MsgSetKmsAddressResponse")
}

func init() { proto.RegisterFile("synapse/tx.proto", fileDescriptor_f4efa802519a8c67) }

var fileDescriptor_f4efa802519a8c67 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0x93, 0xe8, 0xfb, 0x9a, 0x9b, 0x20, 0x05, 0x13, 0x09, 0xd7, 0x20, 0x37, 0xb5, 0x04,
	0x04, 0xd1, 0xce, 0x28, 0xe1, 0x09, 0x48, 0x40, 0x6a, 0x55, 0x45, 0x41, 0x46, 0x08, 0x91, 0xdd,
	0xd8, 0x1e, 0x39, 0x16, 0x64, 0xc6, 0xf2, 0x4c, 0xaa, 0xf6, 0x2d, 0x78, 0x04, 0x36, 0x6c, 0x78,
	0x12, 0x96, 0x5d, 0xb2, 0x03, 0x25, 0x12, 0xcf, 0x81, 0xc6, 0x76, 0x5c, 0xa7, 0xf9, 0x51, 0x76,
	0xac, 0x72, 0x7f, 0x8e, 0xcf, 0xb9, 0xf7, 0xe4, 0xda, 0xd0, 0x14, 0xd7, 0x8c, 0x44, 0x82, 0x62,
	0x79, 0x85, 0xa2, 0x98, 0x4b, 0xae, 0x37, 0x3c, 0x1e, 0x53, 0x94, 0x95, 0x4d, 0xcb, 0xe3, 0x62,
	0xca, 0x05, 0x76, 0x89, 0xa0, 0xf8, 0xb2, 0xeb, 0x52, 0x49, 0xba, 0xd8, 0xe3, 0x21, 0x4b, 0xd1,
	0x66, 0x2b, 0xe0, 0x01, 0x4f, 0x42, 0xac, 0xa2, 0xb4, 0x6a, 0x7f, 0x80, 0xfa, 0x50, 0x04, 0xfd,
	0x38, 0xf4, 0x03, 0x7a, 0xce, 0x74, 0x03, 0xfe, 0xf7, 0x62, 0x4a, 0x24, 0x8f, 0x0d, 0xad, 0xad,
	0x75, 0x6a, 0xce, 0x32, 0xd5, 0x11, 0x54, 0x7d, 0x22, 0x89, 0x51, 0x6e, 0x57, 0x3a, 0xf5, 0x9e,
	0x89, 0x8a, 0xda, 0xe8, 0x9c, 0xa5, 0x0c, 0xaf, 0x89, 0x24, 0x4e, 0x82, 0xb3, 0xbf, 0x6a, 0xd0,
	0x28, 0x96, 0xf5, 0x31, 0x54, 0xd5, 0x34, 0x46, 0xb9, 0xad, 0x75, 0xea, 0xbd, 0x43, 0x94, 0x8e,
	0x8b, 0xd4, 0xb8, 0x28, 0x1b, 0x17, 0x0d, 0x78, 0xc8, 0xfa, 0x2f, 0xbe, 0xff, 0x3a, 0x7a, 0x16,
	0x84, 0x72, 0x32, 0x73, 0x91, 0xc7, 0xa7, 0x38, 0xdb, 0x2b, 0xfd, 0x39, 0x15, 0xfe, 0x27, 0x2c,
	0xaf, 0x23, 0x2a, 0x12, 0xb0, 0x93, 0x70, 0xea, 0x26, 0x1c, 0xf8, 0x54, 0xc8, 0x57, 0xbe, 0x1f,
	0x1b, 0x95, 0x64, 0xee, 0x3c, 0x57, 0x2b, 0xa9, 0xf8, 0x0d, 0xbb, 0x34, 0xaa, 0xe9, 0x4a, 0x59,
	0x6a, 0x77, 0xe1, 0x41, 0x61, 0x77, 0x87, 0x8a, 0x88, 0x33, 0x41, 0x15, 0x59, 0x4c, 0x45, 0x74,
	0x46, 0xc4, 0x24, 0x33, 0x21, 0xcf, 0xed, 0x8f, 0xd0, 0xc8, 0x1f, 0x19, 0xcd, 0xe4, 0x0e, 0xbf,
	0xf0, 0x8a, 0x5f, 0x8f, 0x56, 0xfd, 0x1a, 0xcd, 0xe4, 0x9a, 0x61, 0xdf, 0x34, 0xb8, 0xb7, 0x52,
	0xff, 0x67, 0x8e, 0x3d, 0x86, 0x9a, 0x8a, 0x07, 0x13, 0x12, 0xb2, 0xcc, 0xb3, 0xdb, 0x82, 0xdd,
	0x83, 0x56, 0xd1, 0x82, 0xbd, 0x6c, 0x23, 0xf0, 0x70, 0x28, 0x82, 0x77, 0x54, 0xbe, 0xa5, 0xcc,
	0x0f, 0x59, 0x70, 0x31, 0x15, 0x4a, 0x89, 0x0a, 0xb1, 0xc3, 0xc1, 0x13, 0xb8, 0x1f, 0xdd, 0x85,
	0x27, 0x5e, 0xd4, 0x9c, 0xf5, 0x86, 0x7d, 0x0c, 0x47, 0x5b, 0x24, 0x96, 0x13, 0xda, 0x27, 0xd0,
	0x4c, 0x21, 0xfb, 0xc8, 0xdb, 0x26, 0x18, 0x77, 0xd1, 0x4b, 0xa6, 0xde, 0x9f, 0x32, 0x54, 0x86,
	0x22, 0xd0, 0xcf, 0xe0, 0x20, 0x7f, 0x75, 0x0e, 0x57, 0xff, 0xe2, 0xc2, 0x65, 0x99, 0xc7, 0x5b,
	0x5b, 0xb9, 0x7b, 0x17, 0x50, 0xbb, 0xbd, 0x2a, 0x73, 0x0b, 0x7e, 0x34, 0x93, 0xa6, 0xbd, 0xbd,
	0x97, 0x93, 0x7d, 0x86, 0xd6, 0x46, 0xaf, 0x9f, 0xac, 0x3d, 0xbb, 0x09, 0x66, 0x9e, 0xee, 0x05,
	0xcb, 0xd5, 0xc6, 0xd0, 0x7c, 0x1f, 0xf9, 0x44, 0xd2, 0x82, 0x92, 0xb5, 0x89, 0xa2, 0x20, 0xf1,
	0x74, 0x77, 0x7f, 0xc9, 0xdd, 0x1f, 0xfc, 0x98, 0x5b, 0xda, 0xcd, 0xdc, 0xd2, 0x7e, 0xcf, 0x2d,
	0xed, 0xcb, 0xc2, 0x2a, 0xdd, 0x2c, 0xac, 0xd2, 0xcf, 0x85, 0x55, 0x1a, 0x3f, 0x2f, 0xdc, 0xbb,
	0x4b, 0x63, 0xe2, 0xa9, 0xe3, 0xc4, 0x8a, 0x15, 0x5f, 0xe1, 0xfc, 0x53, 0xa9, 0xce, 0xde, 0xfd,
	0x2f, 0xf9, 0xd4, 0xbd, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x31, 0xe3, 0x4a, 0xbc, 0x42, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	BridgeIn(ctx context.Context, in *MsgBridgeIn, opts ...grpc.CallOption) (*MsgBridgeInResponse, error)
	BridgeOut(ctx context.Context, in *MsgBridgeOut, opts ...grpc.CallOption) (*MsgBridgeOutResponse, error)
	SetPendingKmsAddress(ctx context.Context, in *MsgSetPendingKmsAddress, opts ...grpc.CallOption) (*MsgSetPendingKmsAddressResponse, error)
	UpdateKmsAddress(ctx context.Context, in *MsgSetKmsAddress, opts ...grpc.CallOption) (*MsgSetKmsAddressResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) BridgeIn(ctx context.Context, in *MsgBridgeIn, opts ...grpc.CallOption) (*MsgBridgeInResponse, error) {
	out := new(MsgBridgeInResponse)
	err := c.cc.Invoke(ctx, "/core.synapse.Msg/BridgeIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BridgeOut(ctx context.Context, in *MsgBridgeOut, opts ...grpc.CallOption) (*MsgBridgeOutResponse, error) {
	out := new(MsgBridgeOutResponse)
	err := c.cc.Invoke(ctx, "/core.synapse.Msg/BridgeOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPendingKmsAddress(ctx context.Context, in *MsgSetPendingKmsAddress, opts ...grpc.CallOption) (*MsgSetPendingKmsAddressResponse, error) {
	out := new(MsgSetPendingKmsAddressResponse)
	err := c.cc.Invoke(ctx, "/core.synapse.Msg/SetPendingKmsAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateKmsAddress(ctx context.Context, in *MsgSetKmsAddress, opts ...grpc.CallOption) (*MsgSetKmsAddressResponse, error) {
	out := new(MsgSetKmsAddressResponse)
	err := c.cc.Invoke(ctx, "/core.synapse.Msg/UpdateKmsAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	BridgeIn(context.Context, *MsgBridgeIn) (*MsgBridgeInResponse, error)
	BridgeOut(context.Context, *MsgBridgeOut) (*MsgBridgeOutResponse, error)
	SetPendingKmsAddress(context.Context, *MsgSetPendingKmsAddress) (*MsgSetPendingKmsAddressResponse, error)
	UpdateKmsAddress(context.Context, *MsgSetKmsAddress) (*MsgSetKmsAddressResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) BridgeIn(ctx context.Context, req *MsgBridgeIn) (*MsgBridgeInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeIn not implemented")
}
func (*UnimplementedMsgServer) BridgeOut(ctx context.Context, req *MsgBridgeOut) (*MsgBridgeOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeOut not implemented")
}
func (*UnimplementedMsgServer) SetPendingKmsAddress(ctx context.Context, req *MsgSetPendingKmsAddress) (*MsgSetPendingKmsAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPendingKmsAddress not implemented")
}
func (*UnimplementedMsgServer) UpdateKmsAddress(ctx context.Context, req *MsgSetKmsAddress) (*MsgSetKmsAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKmsAddress not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_BridgeIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBridgeIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BridgeIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.synapse.Msg/BridgeIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BridgeIn(ctx, req.(*MsgBridgeIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BridgeOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBridgeOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BridgeOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.synapse.Msg/BridgeOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BridgeOut(ctx, req.(*MsgBridgeOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPendingKmsAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPendingKmsAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPendingKmsAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.synapse.Msg/SetPendingKmsAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPendingKmsAddress(ctx, req.(*MsgSetPendingKmsAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateKmsAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetKmsAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateKmsAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.synapse.Msg/UpdateKmsAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateKmsAddress(ctx, req.(*MsgSetKmsAddress))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.synapse.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BridgeIn",
			Handler:    _Msg_BridgeIn_Handler,
		},
		{
			MethodName: "BridgeOut",
			Handler:    _Msg_BridgeOut_Handler,
		},
		{
			MethodName: "SetPendingKmsAddress",
			Handler:    _Msg_SetPendingKmsAddress_Handler,
		},
		{
			MethodName: "UpdateKmsAddress",
			Handler:    _Msg_UpdateKmsAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synapse/tx.proto",
}

func (m *MsgBridgeIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InBridgeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InBridgeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InBridgeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestEnv) > 0 {
		i -= len(m.DestEnv)
		copy(dAtA[i:], m.DestEnv)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestEnv)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DestAddr) > 0 {
		i -= len(m.DestAddr)
		copy(dAtA[i:], m.DestAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Coin != nil {
		{
			size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgeInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeInResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeInResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RespHash) > 0 {
		i -= len(m.RespHash)
		copy(dAtA[i:], m.RespHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RespHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgeOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutBridgeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutBridgeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutBridgeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestChain) > 0 {
		i -= len(m.DestChain)
		copy(dAtA[i:], m.DestChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DestAddr) > 0 {
		i -= len(m.DestAddr)
		copy(dAtA[i:], m.DestAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Coin != nil {
		{
			size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgeOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RespHash) > 0 {
		i -= len(m.RespHash)
		copy(dAtA[i:], m.RespHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RespHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetPendingKmsAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPendingKmsAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPendingKmsAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingKmsAddress) > 0 {
		i -= len(m.PendingKmsAddress)
		copy(dAtA[i:], m.PendingKmsAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PendingKmsAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetPendingKmsAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPendingKmsAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPendingKmsAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetKmsAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetKmsAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetKmsAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetKmsAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetKmsAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetKmsAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgBridgeIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *InBridgeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != nil {
		l = m.Coin.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestEnv)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBridgeInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RespHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBridgeOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *OutBridgeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != nil {
		l = m.Coin.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBridgeOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RespHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetPendingKmsAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PendingKmsAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetPendingKmsAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetKmsAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetKmsAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgBridgeIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &InBridgeData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InBridgeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InBridgeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InBridgeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coin == nil {
				m.Coin = &types.Coin{}
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestEnv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestEnv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &OutBridgeData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutBridgeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutBridgeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutBridgeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coin == nil {
				m.Coin = &types.Coin{}
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPendingKmsAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPendingKmsAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPendingKmsAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingKmsAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingKmsAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPendingKmsAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPendingKmsAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPendingKmsAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetKmsAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetKmsAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetKmsAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetKmsAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetKmsAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetKmsAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
